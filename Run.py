"""
import asyncio
import time
import pytz
from ATR import calculate_atr
from Step import fetch_btc_candles, analyze_candle
from Deal import simulate_trade, report_hourly_pnl
from Telegram import send_telegram_message
from Start_stop import monitor_schedule  # ‚¨ÖÔ∏è –ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç –∏ –∞–≤—Ç–æ—Å—Ç–æ–ø –ø–æ –≤—Ä–µ–º–µ–Ω–∏
from datetime import datetime

def is_trading_hours():
    tz = pytz.timezone("Europe/Amsterdam")
    now = datetime.now(tz)
    return 8 <= now.hour < 23

btc_symbol = "BTCUSDT"

async def main():
    if not is_trading_hours():
        print("‚èπ –í–Ω–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —á–∞—Å–æ–≤. –ë–æ—Ç –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è.")
        return

    asyncio.create_task(monitor_schedule())
    while True:
        try:
            # üìä –ï–∂–µ—á–∞—Å–Ω—ã–π PnL-–æ—Ç—á—ë—Ç
            current_minute = time.localtime().tm_min
            if current_minute == 0:
                await report_hourly_pnl()
                await asyncio.sleep(60)  # –ß—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ–¥–Ω–æ–π –º–∏–Ω—É—Ç—ã

            # ‚è≥ –ñ–¥—ë–º –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–æ–≤–æ–π —Å–≤–µ—á–∏
            now = time.time()
            wait = 300 - (now % 300)
            await asyncio.sleep(wait)

            # üü° –ü–æ–ª—É—á–∞–µ–º ATR
            btc_atr = await calculate_atr()

            # üëÅ –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ —Å–≤–µ—á–æ–π
            while True:
                btc_df = await fetch_btc_candles()
                delta, direction, price = await analyze_candle(btc_df, btc_atr)

                if delta >= 0.25 * btc_atr:
                    await simulate_trade(direction, price, btc_atr)
                    break
                else:
                    await asyncio.sleep(10)

        except Exception as e:
            send_telegram_message(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")

if __name__ == "__main__":
    asyncio.run(main())
