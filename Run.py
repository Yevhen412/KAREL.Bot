import asyncio
import time
from ATR import calculate_atr
from Step import fetch_btc_candles, analyze_candle
from AltFetcher import fetch_alt_candles_batch
from Correlation import calculate_correlation
from Lag import detect_lag
from Deal import simulate_trade
from Telegram import send_telegram_message

btc_symbol = "BTCUSDT"
alt_symbols = ["ETHUSDT", "SOLUSDT", "ADAUSDT", "AVAXUSDT", "XRPUSDT"]

async def main():
    send_telegram_message("üîÅ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")

    while True:
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º ATR
            try:
                btc_atr = await calculate_atr()
                send_telegram_message(f"üü° BTC ATR: {btc_atr:.2f}")
            except Exception as e:
                send_telegram_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ ATR: {e}")
                continue

            # 2. –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á—É BTC
            try:
                btc_df = await fetch_btc_candles(btc_symbol)
                delta, direction = await analyze_candle(btc_df, btc_atr)
                send_telegram_message(f"üü¢ Œî: {delta:.2f}")
            except Exception as e:
                send_telegram_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–≤–µ—á–∏ BTC: {e}")
                continue

            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∏–ª—É –∏–º–ø—É–ª—å—Å–∞
            if delta < btc_atr * 0.5:
                send_telegram_message("‚õîÔ∏è Œî < 50% ATR ‚Äî —Ä–∞—Å—á—ë—Ç –ø—Ä–æ–ø—É—â–µ–Ω")
            else:
                try:
                    alt_data = await fetch_alt_candles_batch(alt_symbols)
                    correlations = calculate_correlation(btc_df, alt_data)
                    lagging_coins = detect_lag(btc_df, alt_data, correlations)
                except Exception as e:
                    send_telegram_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–ª—å—Ç–æ–≤: {e}")
                    continue

                if lagging_coins:
                    try:
                        for coin in lagging_coins:
                            simulate_trade(direction, coin)
                    except Exception as e:
                        send_telegram_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–º—É–ª—è—Ü–∏–∏ —Å–¥–µ–ª–∫–∏: {e}")
                else:
                    send_telegram_message("‚ÑπÔ∏è –õ–∞–≥ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω. –°–¥–µ–ª–∫–∞ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç–∞.")

        except Exception as e:
            send_telegram_message(f"üö® –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")

        # –ü–∞—É–∑–∞ –¥–æ –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å–≤–µ—á–∏
        now = time.time()
        next_candle = 300 - (now % 300)
        send_telegram_message("‚úÖ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω ‚Äî –æ–∂–∏–¥–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é 5-–º–∏–Ω—É—Ç–Ω—É—é —Å–≤–µ—á—É")
        await asyncio.sleep(next_candle)

if __name__ == "__main__":
    asyncio.run(main())
