import asyncio
from ATR import fetch_btc_candles, calculate_atr
from Step import analyze_candle

async def main():
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π –∏ ATR –∏–∑ –±–ª–æ–∫–∞ 1
    candles_df = await fetch_btc_candles()
    atr = calculate_atr(candles_df)

    print("üìè ATR –∑–∞ 12 —Å–≤–µ—á–µ–π (5m):")
    print(f"ATR = {atr:.2f} USDT\n")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏ –∏–∑ –±–ª–æ–∫–∞ 2
    candle_data = await analyze_candle()

    print("üïØ –î–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏ BTC (5m):")
    print(f"–û—Ç–∫—Ä—ã—Ç–∏–µ: {candle_data['open']}")
    print(f"–ú–∞–∫—Å–∏–º—É–º: {candle_data['high']}")
    print(f"–ú–∏–Ω–∏–º—É–º: {candle_data['low']}")
    print(f"–ó–∞–∫—Ä—ã—Ç–∏–µ: {candle_data['close']}")
    print(f"–î–µ–ª—å—Ç–∞ (High - Low): {candle_data['delta']:.2f}")
    print(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {candle_data['direction']}")
    print(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ —Å–≤–µ—á—É: {candle_data['pct_change']:.2f}%")

if __name__ == "__main__":
    asyncio.run(main())
