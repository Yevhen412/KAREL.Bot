import asyncio
from ATR import calculate_atr
from Step import analyze_candle
from Correlation import calculate_correlation
from Lag import detect_lag
from Deal import simulate_trade
from Telegram import send_telegram_message
from fetch_assets import fetch_alt_candles

btc_symbol = "BTCUSDT"
alt_symbols = ["ETHUSDT", "SOLUSDT", "ADAUSDT", "AVAXUSDT", "XRPUSDT"]

try:
    # –ü–æ–ª—É—á–∞–µ–º ATR –ø–æ BTC
    btc_atr = await calculate_atr()
    print(f"[BTC ATR]: {btc_atr:.2f}")

    # –û—Ç–ª–∞–¥–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Å–≤–µ—á–µ–π
    print("üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–≤–µ—á–∏ BTC...")

    # –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏ BTC
    btc_df = await fetch_alt_candles(btc_symbol)
    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ BTC: {btc_df.tail()}")

    delta, direction = analyze_current_step(btc_df)
    print(f"[BTC Œî]: {delta:.2f} ‚Üí –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}")

    if delta >= btc_atr * 0.5:
        print("üöÄ Œî –ø—Ä–µ–≤—ã—à–∞–µ—Ç 50% ATR ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–ª—å—Ç–∞–º
        alt_data = {}
        for alt in alt_symbols:
            print(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ {alt}...")
            alt_df = await fetch_alt_candles(alt)
            alt_data[alt] = alt_df

        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        correlations = calculate_correlation(btc_df, alt_data)
        print(f"[–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏]: {correlations}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∞–≥
        lagging_coins = detect_lag(btc_df, alt_data, correlations)
        if lagging_coins:
            for coin in lagging_coins:
                print(f"[–õ–ê–ì]: {coin}")
                await simulate_trade(btc_df, alt_data[coin], direction)
        else:
            print("‚ùå –õ–∞–≥ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω")

    else:
        print("üïí Œî –º–µ–Ω—å—à–µ 50% ATR ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—á—ë—Ç")

except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–≤–µ—á–∏: {e}")
    send_telegram_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ run.py: {e}")
