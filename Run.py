import asyncio
import time
from ATR import calculate_atr
from Step import fetch_btc_candles, analyze_candle
from AltFetcher import fetch_alt_candles_batch
from Correlation import calculate_correlation
from Lag import detect_lag
from Deal import simulate_trade
from Telegram import send_telegram_message

btc_symbol = "BTCUSDT"
alt_symbols = ["ETHUSDT", "SOLUSDT", "ADAUSDT", "AVAXUSDT", "XRPUSDT"]

async def main():
    while True:
        try:
            # 1. –ñ–¥—ë–º –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–æ–≤–æ–π —Å–≤–µ—á–∏
            now = time.time()
            seconds_to_next_candle = 300 - (now % 300)
            send_telegram_message(f"‚è≥ –ñ–¥—ë–º –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–æ–≤–æ–π —Å–≤–µ—á–∏: {int(seconds_to_next_candle)} —Å–µ–∫...")
            await asyncio.sleep(seconds_to_next_candle)

            # 2. –ü–æ–ª—É—á–∞–µ–º ATR
            btc_atr = await calculate_atr()
            send_telegram_message(f"üü° BTC ATR: {btc_atr:.2f}")

            # 3. –°–ª–µ–¥–∏–º –∑–∞ –Ω–æ–≤–æ–π 5-–º–∏–Ω —Å–≤–µ—á–æ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ (–¥–æ –µ—ë –∑–∞–∫—Ä—ã—Ç–∏—è)
            candle_reached_threshold = False
            candle_start_time = time.time()
            while time.time() - candle_start_time < 300:
                btc_df = await fetch_btc_candles(btc_symbol)
                delta, direction = await analyze_candle(btc_df, btc_atr)

                if direction:
                    send_telegram_message(f"üü¢ Œî: {delta:.2f} ‚Äî –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ 50% ATR")
                    candle_reached_threshold = True
                    break  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∞–Ω–∞–ª–∏–∑—É –∞–ª—å—Ç–æ–≤
                else:
                    await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–ª—å—Ç—É –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

            if not candle_reached_threshold:
                send_telegram_message("‚õîÔ∏è –°–≤–µ—á–∞ –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∞ 50% ATR ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π.")
                continue

            # 4. –†–∞–±–æ—Ç–∞–µ–º —Å –∞–ª—å—Ç–∞–º–∏
            alt_data = await fetch_alt_candles_batch(alt_symbols)
            correlations = calculate_correlation(btc_df, alt_data)
            lagging_coins = detect_lag(btc_df, alt_data, correlations)

            # 5. –°–¥–µ–ª–∫–∞
            if lagging_coins:
                for coin in lagging_coins:
                    simulate_trade(direction, coin)

        except Exception as e:
            send_telegram_message(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")

if __name__ == "__main__":
    asyncio.run(main())
