import asyncio
from ATR import calculate_atr
from Step import analyze_candle
from AltFetcher import fetch_alt_candles
from Correlation import calculate_correlation
from Lag import detect_lag
from Deal import simulate_trade

btc_symbol = "BTCUSDT"
alt_symbols = ["ETHUSDT", "SOLUSDT", "ADAUSDT", "AVAXUSDT", "XRPUSDT"]

async def main():
    try:
        # –ü–æ–ª—É—á–∞–µ–º ATR –ø–æ BTC
        btc_atr = await calculate_atr()
        print(f"üü° BTC ATR: {btc_atr:.2f}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ ATR: {e}")
        return
# –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ BTC
btc_df = await fetch_alt_candles(btc_symbol)
delta, direction = await analyze_candle(btc_df, btc_atr)
print(f"üü¢ Œî: {delta:.2f}")

if delta < btc_atr * 0.5:
    print("‚õîÔ∏è Œî < 50% ATR ‚Äî —Ä–∞—Å—á—ë—Ç –ø—Ä–æ–ø—É—â–µ–Ω")
    return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–º–ø—É–ª—å—Å
        if delta >= btc_atr * 0.5:
            alt_data = await fetch_alt_data(alt_symbols)
            correlations = calculate_correlations(btc_df, alt_data)
            lagging_coins = detect_lag(btc_df, alt_data, correlations)

            if lagging_coins:
                for coin in lagging_coins:
                    simulate_trade(direction, coin)

    except Exception:
        pass

if __name__ == "__main__":
    asyncio.run(main())
