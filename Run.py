import asyncio
import time
from ATR import calculate_atr
from Step import fetch_btc_candles, analyze_candle
from AltFetcher import fetch_alt_candles_batch
from Correlation import calculate_correlation
from Lag import detect_lag
from Deal import simulate_trade
from Telegram import send_telegram_message

btc_symbol = "BTCUSDT"
alt_symbols = ["ETHUSDT", "SOLUSDT", "ADAUSDT", "AVAXUSDT", "XRPUSDT"]

async def main():
    while True:
        try:
            # 1. –†–∞—Å—á—ë—Ç ATR
            btc_atr = await calculate_atr()
            send_telegram_message(f"üü° BTC ATR: {btc_atr:.2f}")

            # 2. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–≤–µ—á—É
            btc_df = await fetch_btc_candles(btc_symbol)
            delta, direction = await analyze_candle(btc_df, btc_atr)
            send_telegram_message(f"üü¢ Œî: {delta:.2f}")

            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–º–ø—É–ª—å—Å
            if delta < btc_atr * 0.5:
                send_telegram_message("‚õîÔ∏è Œî < 50% ATR ‚Äî —Ä–∞—Å—á—ë—Ç –ø—Ä–æ–ø—É—â–µ–Ω")
            else:
                send_telegram_message("üöÄ Œî >= 50% ATR ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∞–ª—å—Ç–æ–≤")

                # 4. –î–∞–Ω–Ω—ã–µ –ø–æ –∞–ª—å—Ç–∫–æ–∏–Ω–∞–º
                alt_data = await fetch_alt_candles_batch(alt_symbols)
                send_telegram_message(f"üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–ª—å—Ç–∞–º: {list(alt_data.keys())}")

                # 5. –†–∞—Å—á—ë—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
                correlations = calculate_correlation(btc_df, alt_data)
                send_telegram_message(f"üìà –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: {correlations}")

                # 6. –ê–Ω–∞–ª–∏–∑ –ª–∞–≥–∞
                lagging_coins = detect_lag(btc_df, alt_data, correlations)
                if lagging_coins:
                    send_telegram_message(f"üêå –û–±–Ω–∞—Ä—É–∂–µ–Ω –ª–∞–≥ —É: {lagging_coins}")
                    for coin in lagging_coins:
                        simulate_trade(direction, coin)
                        send_telegram_message(f"üí∞ –°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–∞ —Å–¥–µ–ª–∫–∞ –ø–æ {coin} –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ {direction}")
                else:
                    send_telegram_message("üîï –õ–∞–≥ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω ‚Äî —Å–¥–µ–ª–∫–∞ –Ω–µ —Å–æ–≤–µ—Ä—à–µ–Ω–∞")

        except Exception as e:
            send_telegram_message(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")

        # 7. –ñ–¥—ë–º –¥–æ –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å–≤–µ—á–∏
        now = time.time()
        next_candle = 300 - (now % 300)
        send_telegram_message("‚úÖ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω ‚Äî –æ–∂–∏–¥–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é 5-–º–∏–Ω—É—Ç–Ω—É—é —Å–≤–µ—á—É")
        await asyncio.sleep(next_candle)

if __name__ == "__main__":
    asyncio.run(main())
