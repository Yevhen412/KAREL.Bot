"""
import asyncio
import time
from ATR import calculate_atr
from Step import fetch_btc_candles, analyze_candle
from AltFetcher import fetch_alt_candles_batch
from Correlation import calculate_correlation
from Lag import detect_lag
from Deal import simulate_trade
from Telegram import send_telegram_message


btc_symbol = "BTCUSDT"
alt_symbols = ["ETHUSDT", "SOLUSDT", "ADAUSDT", "AVAXUSDT", "XRPUSDT"]

async def main():
    while True:
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º ATR –ø–æ BTC
            btc_atr = await calculate_atr()
            send_telegram_message(f"üü° BTC ATR: {btc_atr:.2f}")

            # 2. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é 5-–º–∏–Ω —Å–≤–µ—á—É
            btc_df = await fetch_btc_candles(btc_symbol)
            delta, direction = await analyze_candle(btc_df, btc_atr)
            send_telegram_message(f"üü¢ Œî: {delta:.2f}")

            # 3. –£—Å–ª–æ–≤–∏–µ –≤—Ö–æ–¥–∞ ‚Äî —Å–∏–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
            if delta < btc_atr * 0.5:
                send_telegram_message(f"‚õîÔ∏è Œî < 50% ATR ‚Äî —Ä–∞—Å—á—ë—Ç –ø—Ä–æ–ø—É—â–µ–Ω")
            else:
                # 4. –†–∞–±–æ—Ç–∞–µ–º —Å –∞–ª—å—Ç–∞–º–∏
                alt_data = await fetch_alt_candles_batch(alt_symbols)
                correlations = calculate_correlation(btc_df, alt_data)
                lagging_coins = detect_lag(btc_df, alt_data, correlations)

                # 5. –°–¥–µ–ª–∫–∞
                if lagging_coins:
                    for coin in lagging_coins:
                        simulate_trade(direction, coin)

        except Exception as e:
            send_telegram_message(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")

        # –ñ–¥—ë–º –¥–æ –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–π 5-–º–∏–Ω—É—Ç–Ω–æ–π —Å–≤–µ—á–∏
        now = time.time()
        next_candle = 300 - (now % 300)
        send_telegram_message(f"‚úÖ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω ‚Äî –æ–∂–∏–¥–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é 5-–º–∏–Ω—É—Ç–Ω—É—é —Å–≤–µ—á—É")
        await asyncio.sleep(next_candle)

if __name__ == "__main__":
    asyncio.run(main())
