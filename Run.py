import asyncio
from ATR import calculate_atr
from Step import analyze_candle
from Correlation import calculate_correlation
from AltFetcher import fetch_alt_candles

import datetime

async def main():
    print("\n=== RUNNING STRATEGY ===")

    # –ü–æ–ª—É—á–∞–µ–º ATR BTC (–ø–æ —Ñ—å—é—á–µ—Ä—Å–∞–º)
    atr_value = await calculate_atr()
    print(f"[{datetime.datetime.now()}] ‚úÖ Current ATR (BTC): {atr_value:.2f}")

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–µ—á—É BTC
    step_data = await get_latest_candle()
    if step_data is None:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–µ—á—É.")
        return

    open_price = float(step_data["open"])
    close_price = float(step_data["close"])
    delta = abs(close_price - open_price)

    print(f"[{datetime.datetime.now()}] üìä BTC Œî: {delta:.2f} / {atr_value:.2f} ATR")

    # –£—Å–ª–æ–≤–∏–µ: –µ—Å–ª–∏ —Å–≤–µ—á–∞ –ø—Ä–æ—à–ª–∞ ‚â• 50% ATR
    if delta >= 0.5 * atr_value:
        print(f"[{datetime.datetime.now()}] üîç Œî –ø—Ä–µ–≤—ã—à–∞–µ—Ç 50% ATR ‚Üí —Å—á–∏—Ç–∞–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏...")

        target_symbols = ["ETHUSDT", "SOLUSDT", "ADAUSDT", "AVAXUSDT", "XRPUSDT", "PEPEUSDT"]
        correlations = {}

        for symbol in target_symbols:
            alt_df = await fetch_alt_candles(symbol)
            corr = await calculate_correlation("BTCUSDT", alt_df)
            correlations[symbol] = corr

        print("\nüìà –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏:")
        for sym, val in correlations.items():
            print(f"{sym}: {val:.3f}")

    else:
        print(f"[{datetime.datetime.now()}] ‚ùå Œî –Ω–∏–∂–µ 50% ATR. –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –Ω–µ —Å—á–∏—Ç–∞–µ–º.")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    asyncio.run(main())
