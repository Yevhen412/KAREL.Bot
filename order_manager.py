# order_manager.py
from typing import Optional
from collections import deque
from config import (
    TICK_SIZE, TIME_STOP_SEC,
    MIN_SPREAD_TICKS, IMPULSE_TICKS, IMPULSE_WINDOW,
)
from utils import now_ms
from telegram import log


class OrderManager:
    """
    –õ–∏–º–∏—Ç–∫–∏ –≤–Ω—É—Ç—Ä–∏ —Å–ø—Ä–µ–¥–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:
      - —Å–ø—Ä–µ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å >= MIN_SPREAD_TICKS
      - –º–∏–∫—Ä–æ-–∏–º–ø—É–ª—å—Å –≤ —Å—Ç–æ—Ä–æ–Ω—É —Å–¥–µ–ª–∫–∏ (IMPULSE_TICKS –≤ –æ–∫–Ω–µ IMPULSE_WINDOW)
      - –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Ü–µ–Ω—ã –∏ –ø–æ —Ç–∞–π–º–∞—É—Ç—É
    """
    def __init__(self, simulator, side: str = "long"):
        assert side in ("long", "short")
        self.side = side
        self.sim = simulator
        self.last_place_ts: Optional[int] = None
        self.current_price: Optional[float] = None
        self.mid_history = deque(maxlen=IMPULSE_WINDOW)

    def desired_price(self, best_bid: float, best_ask: float) -> float:
        spread = round(best_ask - best_bid, 10)
        if self.side == "long":
            if spread <= TICK_SIZE:   # —Å–ø—Ä–µ–¥ 1 —Ç–∏–∫ ‚Äî –æ—Å—Ç–∞—ë–º—Å—è maker –Ω–∞ bid
                return best_bid
            return min(best_bid + TICK_SIZE, best_ask - TICK_SIZE)
        else:
            if spread <= TICK_SIZE:
                return best_ask
            return max(best_ask - TICK_SIZE, best_bid + TICK_SIZE)

    def _has_impulse(self) -> bool:
        if len(self.mid_history) < 3:
            return False
        first = self.mid_history[0]
        last = self.mid_history[-1]
        delta = last - first
        ticks = delta / TICK_SIZE
        return (ticks >= IMPULSE_TICKS) if self.side == "long" else (ticks <= -IMPULSE_TICKS)

    def on_orderbook(self, best_bid: float, best_ask: float):
        # –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –ø–æ–∑–∏—Ü–∏—è —É–∂–µ –æ—Ç–∫—Ä—ã–ª–∞—Å—å ‚Äî —Å–Ω–∏–º–µ–º –≤–∏—Å—è—â–∏–π –≤—Ö–æ–¥
        if self.sim.position is not None:
            if self.sim.open_order is not None:
                self.sim.cancel_entry("position opened")
                self.current_price = None
                self.last_place_ts = None
            return

        # –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é mid –¥–ª—è –∏–º–ø—É–ª—å—Å–∞
        self.mid_history.append((best_bid + best_ask) / 2)
        spread_ticks = (best_ask - best_bid) / TICK_SIZE

        # —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å–ø—Ä–µ–¥—É
        if spread_ticks < MIN_SPREAD_TICKS:
            if self.sim.open_order is not None:
                self.sim.cancel_entry(f"spread<{MIN_SPREAD_TICKS} ticks (now={spread_ticks:.0f})")
                self.current_price = None
                self.last_place_ts = None
            return

        # —Ñ–∏–ª—å—Ç—Ä –ø–æ –º–∏–∫—Ä–æ-–∏–º–ø—É–ª—å—Å—É
        if not self._has_impulse():
            return

        price = self.desired_price(best_bid, best_ask)

        # 1) –Ω–µ—Ç –ª–∏–º–∏—Ç–∫–∏ ‚Äî —Å—Ç–∞–≤–∏–º –Ω–æ–≤—É—é
        if self.sim.open_order is None:
            self.sim.place_entry_limit(self.side, price)
            self.current_price = price
            self.last_place_ts = now_ms()
            log(f"üìå Placed NEW {self.side.upper()} limit @ {price:.1f}")
            return

        # 2) –ø–µ—Ä–µ—Å—Ç–∞–≤–∏—Ç—å –∏–∑-–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã (>= 1 —Ç–∏–∫)
        if abs(price - (self.current_price or 0)) >= TICK_SIZE:
            self.sim.cancel_entry(f"price change {self.current_price:.1f}‚Üí{price:.1f}")
            self.sim.place_entry_limit(self.side, price)
            self.current_price = price
            self.last_place_ts = now_ms()
            log(f"‚ôªÔ∏è Price change ‚Üí moved {self.side.UPPER()} limit to {price:.1f}")
            return

        # 3) –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ —Ç–∞–π–º–∞—É—Ç—É (–¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥–∏)
        if self.last_place_ts and now_ms() - self.last_place_ts > TIME_STOP_SEC * 1000:
            self.sim.cancel_entry(f"lifetime>{TIME_STOP_SEC}s")
            self.sim.place_entry_limit(self.side, price)
            self.current_price = price
            self.last_place_ts = now_ms()
            log(f"‚è≥ Lifetime expired ‚Üí refreshed {self.side.upper()} limit @ {price:.1f}")
            return
