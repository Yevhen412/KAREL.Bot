# order_manager.py
from typing import Optional
from config import TICK_SIZE, TRADE_SIZE, TIME_STOP_SEC
from utils import now_ms
from telegram import log


class OrderManager:
    """
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π –∏ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ª–∏–º–∏—Ç–æ–∫ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –º–∏–∫—Ä–æ—Å–∫–∞–ª—å–ø–∏–Ω–≥–∞.
    –õ–æ–≥–∏–∫–∞:
      - –õ–û–ù–ì: —Ü–µ–Ω–∞ = min(best_bid + —Ç–∏–∫, best_ask - —Ç–∏–∫) (—á—Ç–æ–±—ã –±—ã—Ç—å maker).
      - –ï—Å–ª–∏ —Å–ø—Ä–µ–¥ = 1 —Ç–∏–∫, –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ best_bid.
      - –®–û–†–¢: –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ, –Ω–æ –æ—Ç ask-—Ç–∏–∫–æ–≤.
    """
    def __init__(self, simulator, side: str = "long"):
        assert side in ("long", "short")
        self.side = side
        self.sim = simulator
        self.last_place_ts: Optional[int] = None
        self.current_price: Optional[float] = None

    def desired_price(self, best_bid: float, best_ask: float) -> float:
        spread = round(best_ask - best_bid, 10)
        if self.side == "long":
            if spread <= TICK_SIZE:
                return best_bid
            return min(best_bid + TICK_SIZE, best_ask - TICK_SIZE)
        else:
            if spread <= TICK_SIZE:
                return best_ask
            return max(best_ask - TICK_SIZE, best_bid + TICK_SIZE)

    def on_orderbook(self, best_bid: float, best_ask: float):
        # –ù–µ —Å—Ç–∞–≤–∏–º –≤—Ö–æ–¥, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è
        if self.sim.position is not None:
            return

        price = self.desired_price(best_bid, best_ask)

        # 1Ô∏è‚É£ –ù–µ—Ç –ª–∏–º–∏—Ç–∫–∏ ‚Äî —Å—Ç–∞–≤–∏–º –Ω–æ–≤—É—é
        if self.sim.open_order is None:
            self.sim.place_entry_limit(self.side, price)
            self.current_price = price
            self.last_place_ts = now_ms()
            log(f"üìå Placed NEW {self.side.upper()} limit @ {price:.1f}")
            return

        # 2Ô∏è‚É£ –¶–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å ‚Äî –ø–µ—Ä–µ—Å—Ç–∞–≤–ª—è–µ–º
        if abs(price - (self.current_price or 0)) >= TICK_SIZE:
            self.sim.cancel_entry()
            self.sim.place_entry_limit(self.side, price)
            self.current_price = price
            self.last_place_ts = now_ms()
            log(f"‚ôªÔ∏è Price change ‚Üí moved {self.side.upper()} limit to {price:.1f}")
            return

        # 3Ô∏è‚É£ –õ–∏–º–∏—Ç–∫–∞ –≤–∏—Å–∏—Ç –¥–æ–ª—å—à–µ ORDER_LIFETIME ‚Äî –ø–µ—Ä–µ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        if self.last_place_ts and now_ms() - self.last_place_ts > TIME_STOP_SEC * 1000:
            self.sim.cancel_entry()
            self.sim.place_entry_limit(self.side, price)
            self.current_price = price
            self.last_place_ts = now_ms()
            log(f"‚è≥ Lifetime expired ‚Üí refreshed {self.side.upper()} limit @ {price:.1f}")
            return
