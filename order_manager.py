# order_manager.py
from time import time
from config import TICK_SIZE
from telegram import log

class OrderManager:
    """
    –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –º–∞—Ä–∫–µ—Ç-–º–µ–π–∫–µ—Ä:
      ‚Ä¢ –°—Ç–∞–≤–∏—Ç –æ–±–µ –ª–∏–º–∏—Ç–∫–∏ (bid/ask) –∫–æ–≥–¥–∞ —Å–ø—Ä–µ–¥ >= 2 —Ç–∏–∫–æ–≤.
      ‚Ä¢ –ü–µ—Ä–µ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–∏ —Å–¥–≤–∏–≥–µ —Ç–æ–ø–∞ >= 1 —Ç–∏–∫.
      ‚Ä¢ –Ø–≤–Ω–æ –ª–æ–≥–∏—Ä—É–µ—Ç, –ü–û–ß–ï–ú–£ –Ω–µ —Å—Ç–∞–≤–∏—Ç –æ—Ä–¥–µ—Ä–∞.
    """
    def __init__(self, simulator):
        self.sim = simulator
        self.last_bid = None
        self.last_ask = None

        # –∞–Ω—Ç–∏—Å–ø–∞–º –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫
        self._last_diag = {}
        self._cooldown = 2.0  # —Å–µ–∫ –º–µ–∂–¥—É –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

    def _diag(self, key: str, msg: str):
        now = time()
        if now - self._last_diag.get(key, 0) >= self._cooldown:
            log(msg)
            self._last_diag[key] = now

    def on_orderbook(self, best_bid: float, best_ask: float):
        # 1) –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if best_bid is None or best_ask is None:
            self._diag("no_ba", "‚ö†Ô∏è –ù–µ—Ç bid/ask –∏–∑ —Å–æ–∫–µ—Ç–∞ (best_bid/best_ask is None)")
            return
        if best_ask < best_bid:
            self._diag("bad_ba", f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏: bid={best_bid} > ask={best_ask}")
            return

        spread = best_ask - best_bid
        spread_ticks = spread / TICK_SIZE

        # 2) —Å–ø—Ä–µ–¥ —Å–ª–∏—à–∫–æ–º –º–∞–ª ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ç–∞–≤–∏–º
        if spread_ticks < 2:
            self._diag(
                "small_spread",
                f"‚è∏ –°–ø—Ä–µ–¥ –º–∞–ª: {spread_ticks:.2f} —Ç–∏–∫–∞ (bid={best_bid}, ask={best_ask}, tick={TICK_SIZE})"
            )
            return

        # ===== BID —Å—Ç–æ—Ä–æ–Ω–∞ =====
        bid_price = best_bid
        if getattr(self.sim, "open_buy_order", None) is None:
            self.sim.place_entry_limit("long", bid_price)
            self.last_bid = bid_price
            log(f"üì• Bid –ª–∏–º–∏—Ç–∫–∞ {bid_price}")
        elif abs(bid_price - (self.last_bid or bid_price)) >= TICK_SIZE:
            # –ø–µ—Ä–µ—Å—Ç–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ —É—à–ª–∏ >= 1 —Ç–∏–∫
            if hasattr(self.sim, "cancel_buy"):
                self.sim.cancel_buy()
            self.sim.place_entry_limit("long", bid_price)
            self.last_bid = bid_price
            log(f"‚ôª –ü–µ—Ä–µ—Å—Ç–∞–≤–∏–ª–∏ Bid {bid_price}")

        # ===== ASK —Å—Ç–æ—Ä–æ–Ω–∞ =====
        ask_price = best_ask
        if not hasattr(self.sim, "open_sell_order"):
            self._diag("no_sell_attr", "‚ùó –í simulator.py –Ω–µ—Ç open_sell_order ‚Äî Ask –Ω–µ –±—É–¥–µ—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω")
            return

        if getattr(self.sim, "open_sell_order", None) is None:
            self.sim.place_entry_limit("short", ask_price)
            self.last_ask = ask_price
            log(f"üì§ Ask –ª–∏–º–∏—Ç–∫–∞ {ask_price}")
        elif abs(ask_price - (self.last_ask or ask_price)) >= TICK_SIZE:
            if hasattr(self.sim, "cancel_sell"):
                self.sim.cancel_sell()
            self.sim.place_entry_limit("short", ask_price)
            self.last_ask = ask_price
            log(f"‚ôª –ü–µ—Ä–µ—Å—Ç–∞–≤–∏–ª–∏ Ask {ask_price}")
