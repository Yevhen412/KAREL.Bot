import json

class TradeSimulator:
    def __init__(self):
        self.in_trade = False  # –§–ª–∞–≥: –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –≤ –ø–æ–∑–∏—Ü–∏–∏

    def process(self, event):
        return self.generate_signal(event)

    def generate_signal(self, event):
        print("[DEBUG] Raw event:", event)

        try:
            data = event.get("data", None)

            if not isinstance(data, list):
                print("‚ùå event['data'] –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º:", data)
                return None

            if not data:
                print("‚ö†Ô∏è event['data'] ‚Äî –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
                return None

            trade = data[0]
            if not isinstance(trade, dict):
                print("‚ùå trade –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä—ë–º:", trade)
                return None

            entry_price_raw = trade.get("p")
            if entry_price_raw is None:
                print("‚ùå –í trade –Ω–µ—Ç –∫–ª—é—á–∞ 'p':", trade)
                return None

            try:
                entry_price = float(entry_price_raw)
            except (ValueError, TypeError) as e:
                print(f"‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å 'p' –≤ —á–∏—Å–ª–æ: {entry_price_raw} ‚Äî {e}")
                return None

            print(f"[‚úÖ] Entry price: {entry_price}")
            return {"entry_price": entry_price}

        except Exception as e:
            print(f"üî• –û—à–∏–±–∫–∞ –≤ generate_signal: {e}")
            return None

    def simulate_trade(self, signal):
        """–ú–µ—Ç–æ–¥ –∑–∞–≥–ª—É—à–∫–∞ ‚Äî –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—É—é —Å–∏–º—É–ª—è—Ü–∏—é."""
        if not signal:
            return "‚ùå –°–∏–≥–Ω–∞–ª –Ω–µ –ø–æ–ª—É—á–µ–Ω."

        entry_price = signal.get("entry_price")
        if entry_price is None:
            return "‚ùå –ù–µ—Ç —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞."

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å: —Ä–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞ –∏ —Ç.–¥.
        print(f"[SIMULATION] –°–¥–µ–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –ø–æ —Ü–µ–Ω–µ: {entry_price}")
        return f"‚úÖ –°–¥–µ–ª–∫–∞ —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ —Ü–µ–Ω–µ: {entry_price}"
