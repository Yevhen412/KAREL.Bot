import time

class TradeSimulator:
    def __init__(self):
        self.in_position = False  # === –ù–æ–≤—ã–π —Ñ–ª–∞–≥ ===
        self.last_report_time = time.time()

    def process(self, event):
        # –õ–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞
        return self.generate_signal(event)

    def generate_signal(self, event):
        # –ó–∞–≥–ª—É—à–∫–∞ ‚Äî –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
        return {
            "side": "long",  # –∏–ª–∏ "short"
            "symbol": event.get("symbol", "UNKNOWN"),
            "entry_price": float(event["data"]["p"]),
            "timestamp": time.time()
        }

    def simulate_trade(self, signal):
        if self.in_position:
            return None  # === –ó–∞–ø—Ä–µ—Ç –Ω–∞ –≤—Ç–æ—Ä—É—é —Å–¥–µ–ª–∫—É ===

        self.in_position = True
        symbol = signal["symbol"]
        side = signal["side"]
        entry = signal["entry_price"]

        # –ü—Ä–∏–º–∏—Ç–∏–≤–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è —Ç–µ–π–∫–∞ –∏ —Å—Ç–æ–ø–∞
        profit = round(0.58 if side == "long" else -0.29, 2)

        self.in_position = False

        # === –¢–∏–∫–µ—Ä –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ ===
        return f"üîÅ –°–¥–µ–ª–∫–∞ {symbol} [{side.upper()}] ‚Üí PnL: {profit}$"

    def generate_hourly_report(self):
        return "üïí –ü–æ—á–∞—Å–æ–≤–æ–π –æ—Ç—á—ë—Ç –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω"
