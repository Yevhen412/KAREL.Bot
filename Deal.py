"""
import time
from datetime import datetime
from decimal import Decimal, getcontext
import requests

# –ü–æ–≤—ã—à–∞–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è –¥–µ–Ω–µ–∂–Ω—ã—Ö —Ä–∞—Å—á—ë—Ç–æ–≤
getcontext().prec = 28

# ====== –ù–ê–°–¢–†–û–ô–ö–ò ======
PAIR = "BTCUSDT"                  # Bybit USDT-—Ñ—å—é—á–µ—Ä—Å
LEVERAGE = Decimal("3")           # –ø–ª–µ—á–æ
TRADE_AMOUNT = Decimal("200")     # –∏–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤, USDT (–∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–∞—Ä–∂–∞)
TAKER_FEE = Decimal("0.001")      # 0.1% –Ω–∞ –≤—Ö–æ–¥ –∏ 0.1% –Ω–∞ –≤—ã—Ö–æ–¥ (taker)
TARGET_NET_PROFIT = Decimal("0.01")  # –ß–ò–°–¢–ê–Ø —Ü–µ–ª—å (+0.01 USDT)
POLL_PRICE_SEC = 0.2              # –∫–∞–∫ —á–∞—Å—Ç–æ –æ–ø—Ä–∞—à–∏–≤–∞—Ç—å —Ü–µ–Ω—É, –∫–æ–≥–¥–∞ –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞
MAX_OPEN_PER_SEC = 1              # –Ω–µ –±–æ–ª–µ–µ 1 –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ —Å–µ–∫—É–Ω–¥—É

# ====== –ì–õ–û–ë–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï ======
in_position = False
last_open_ts = 0.0
entry_price: Decimal | None = None
entry_time: datetime | None = None
required_exit_price: Decimal | None = None  # —Ü–µ–Ω–∞, –¥–∞—é—â–∞—è net >= +0.01 –ø–æ—Å–ª–µ –∫–æ–º–∏—Å—Å–∏–π

# ====== –£–¢–ò–õ–ò–¢–´ ======
def get_current_price() -> Decimal | None:
    """
    –†–µ–∞–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞ —Å Bybit v5 (—Ñ—å—é—á–µ—Ä—Å–Ω—ã–π —Ä—ã–Ω–æ–∫ / linear).
    """
    url = "https://api.bybit.com/v5/market/tickers"
    try:
        r = requests.get(url, params={"category": "linear", "symbol": PAIR}, timeout=2)
        j = r.json()
        # –æ–∂–∏–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É {"result":{"list":[{"lastPrice":"..."}]}}
        price = Decimal(j["result"]["list"][0]["lastPrice"])
        return price
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ü–µ–Ω—ã: {e}")
        return None

def position_value() -> Decimal:
    """–ù–æ—Ç–∏–æ–Ω–∞–ª –ø–æ–∑–∏—Ü–∏–∏ —Å —É—á—ë—Ç–æ–º –ø–ª–µ—á–∞."""
    return TRADE_AMOUNT * LEVERAGE  # USDT

def total_fees(entry_p: Decimal, exit_p: Decimal | None = None) -> Decimal:
    """
    –ö–æ–º–∏—Å—Å–∏—è –±–∏—Ä–∂–∏ —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ—Ç –Ω–æ—Ç–∏—Ü–∏–æ–Ω–∞–ª–∞ —Å–¥–µ–ª–∫–∏ (price*qty = notional).
    –ë–µ—Ä—ë–º ¬´–ø–æ-–ø—Ä–æ—Å—Ç–æ–º—É¬ª: per side = notional * fee; –≤—Å–µ–≥–æ –¥–≤–∞ —Ä–∞–∑–∞ (–≤—Ö–æ–¥+–≤—ã—Ö–æ–¥).
    """
    notional = position_value()
    # –µ—Å–ª–∏ –≤—ã—Ö–æ–¥ –µ—â—ë –Ω–µ –∏–∑–≤–µ—Å—Ç–µ–Ω ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ –∫–æ–º–∏—Å—Å–∏–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã (notional –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π)
    return notional * TAKER_FEE * 2

def gross_pnl(entry_p: Decimal, exit_p: Decimal) -> Decimal:
    """
    –†–µ–∞–ª—å–Ω—ã–π PnL –¥–ª—è USDT-–º–∞—Ä–∂–∏–Ω —Ñ—å—é—á–µ—Ä—Å–∞ (linear):
    PnL = (exit - entry) * qty, –≥–¥–µ qty = notional / entry.
    """
    notional = position_value()
    qty = notional / entry_p
    return (exit_p - entry_p) * qty

def net_pnl(entry_p: Decimal, exit_p: Decimal) -> Decimal:
    """–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å –ø–æ—Å–ª–µ –¥–≤—É—Ö –∫–æ–º–∏—Å—Å–∏–π."""
    return gross_pnl(entry_p, exit_p) - total_fees(entry_p, exit_p)

def solve_required_exit_price(entry_p: Decimal) -> Decimal:
    """
    –ù–∞–π–¥—ë–º —Ü–µ–Ω—É –≤—ã—Ö–æ–¥–∞, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–π NET >= TARGET_NET_PROFIT.
    NET = (p_exit - p_entry) * (notional / p_entry) - (notional * fee * 2)
    => p_exit >= p_entry + (TARGET + notional*fee*2) * (p_entry / notional)
    """
    notional = position_value()
    add = (TARGET_NET_PROFIT + (notional * TAKER_FEE * 2)) * (entry_p / notional)
    return entry_p + add

def is_margin_call(current_p: Decimal) -> bool:
    """
    –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –º–æ–¥–µ–ª—å –º–∞—Ä–∂–∏–Ω-–∫–æ–ª–ª–∞ –ø—Ä–∏ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–∞—Ä–∂–µ:
    –µ—Å–ª–∏ –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —É–±—ã—Ç–æ–∫ –ø–æ –ø–æ–∑–∏—Ü–∏–∏ <= -TRADE_AMOUNT (–≤—Å—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è –º–∞—Ä–∂–∞),
    —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à—ë–ª margin call.
    """
    unrealized = gross_pnl(entry_price, current_p)
    return unrealized <= -TRADE_AMOUNT

def fmt(x: Decimal, n=2) -> str:
    return f"{x:.{n}f}"

def safe_send_telegram(text: str):
    """
    –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å Telegram.py —Å send_telegram_message, —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π:
    from Telegram import send_telegram_message
    –∏ –∑–æ–≤–∏ –µ—ë –∑–¥–µ—Å—å. –°–µ–π—á–∞—Å ‚Äî —Ç–∏—Ö–∏–π no-op.
    """
    try:
        from Telegram import send_telegram_message
        send_telegram_message(text)
    except Exception:
        pass

# ====== –¢–û–†–ì–û–í–ê–Ø –õ–û–ì–ò–ö–ê ======
def open_trade_if_possible(now_ts: float):
    global in_position, last_open_ts, entry_price, entry_time, required_exit_price
    if in_position:
        return
    # –ª–∏–º–∏—Ç –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è: –Ω–µ —á–∞—â–µ 1 –≤ —Å–µ–∫—É–Ω–¥—É
    if now_ts - last_open_ts < (1 / MAX_OPEN_PER_SEC):
        return

    price = get_current_price()
    if price is None:
        return

    in_position = True
    last_open_ts = now_ts
    entry_price = price
    entry_time = datetime.now()
    required_exit_price = solve_required_exit_price(entry_price)

    log = (
        f"üì• –í–•–û–î | {PAIR} | —Ü–µ–Ω–∞ {fmt(entry_price)} | –ø–ª–µ—á–æ x{LEVERAGE} | "
        f"—Ü–µ–ª—å (net +{TARGET_NET_PROFIT} USDT): {fmt(required_exit_price)} | "
        f"–≤—Ä–µ–º—è {entry_time.strftime('%H:%M:%S')}"
    )
    print(log)
    safe_send_telegram(log)

def manage_open_trade():
    """
    –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞ ‚Äî —Å–ª–µ–¥–∏–º –∑–∞ —Ü–µ–Ω–æ–π –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è TP (net>=+0.01)
    –∏–ª–∏ –¥–æ –º–∞—Ä–∂–∏–Ω-–∫–æ–ª–ª–∞. –ü–æ–∑–∏—Ü–∏—è –∂–∏–≤—ë—Ç —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ.
    """
    global in_position, entry_price, entry_time, required_exit_price

    if not in_position:
        return

    price = get_current_price()
    if price is None:
        return

    # TP?
    if price >= required_exit_price:
        exit_price = price
        exit_time = datetime.now()
        net = net_pnl(entry_price, exit_price)
        gross = gross_pnl(entry_price, exit_price)

        msg = (
            "‚úÖ –í–´–•–û–î (TAKE PROFIT)\n"
            f"–ü–∞—Ä–∞: {PAIR}\n"
            f"–í—Ö–æ–¥: {fmt(entry_price)}  ({entry_time.strftime('%H:%M:%S')})\n"
            f"–í—ã—Ö–æ–¥: {fmt(exit_price)}  ({exit_time.strftime('%H:%M:%S')})\n"
            f"Gross PnL: {fmt(gross, 5)} USDT\n"
            f"–ö–æ–º–∏—Å—Å–∏–∏: {fmt(total_fees(entry_price), 5)} USDT\n"
            f"Net PnL: {fmt(net, 5)} USDT"
        )
        print(msg)
        safe_send_telegram(msg)

        # —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        in_position = False
        entry_price = None
        entry_time = None
        required_exit_price = None
        return

    # Margin Call?
    if is_margin_call(price):
        exit_price = price
        exit_time = datetime.now()
        net = net_pnl(entry_price, exit_price)
        gross = gross_pnl(entry_price, exit_price)

        msg = (
            "‚ö†Ô∏è MARGIN CALL (—Å–∏–º—É–ª—è—Ü–∏—è –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏)\n"
            f"–ü–∞—Ä–∞: {PAIR}\n"
            f"–í—Ö–æ–¥: {fmt(entry_price)}  ({entry_time.strftime('%H:%M:%S')})\n"
            f"–í—ã—Ö–æ–¥: {fmt(exit_price)}  ({exit_time.strftime('%H:%M:%S')})\n"
            f"Gross PnL: {fmt(gross, 5)} USDT\n"
            f"–ö–æ–º–∏—Å—Å–∏–∏ (–≤–∫–ª—é—á–µ–Ω—ã –≤ Net –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏): {fmt(total_fees(entry_price), 5)} USDT\n"
            f"Net PnL: {fmt(net, 5)} USDT"
        )
        print(msg)
        safe_send_telegram(msg)

        # —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        in_position = False
        entry_price = None
        entry_time = None
        required_exit_price = None
        return

    # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π heartbeat (–º–æ–∂–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å)
    print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ... —Ç–µ–∫—É—â–∞—è {fmt(price)} | —Ü–µ–ª—å {fmt(required_exit_price)}")

# ====== MAIN LOOP ======
if __name__ == "__main__":
    print("üìà BTCUSDT Futures –º–∏–∫—Ä–æ—Å–∫–∞–ª—å–ø–µ—Ä (—Å–∏–º—É–ª—è—Ç–æ—Ä) –∑–∞–ø—É—â–µ–Ω.")
    while True:
        now = time.time()
        # 1) –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é (–µ—Å–ª–∏ –Ω–µ—Ç)
        open_trade_if_possible(now)
        # 2) –µ—Å–ª–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ ‚Äî –≤–µ–¥—ë–º –µ—ë –¥–æ TP –∏–ª–∏ margin call
        manage_open_trade()
        # –ü–∞—É–∑–∞ –æ–ø—Ä–æ—Å–∞: –∫–æ–≥–¥–∞ –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞ ‚Äî —á–∞—â–µ, –∫–æ–≥–¥–∞ –Ω–µ—Ç ‚Äî —Ä–µ–∂–µ
        time.sleep(POLL_PRICE_SEC if in_position else 1.0)
