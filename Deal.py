"""
import time
from datetime import datetime
from decimal import Decimal, getcontext
import requests

# –ë–û–ª—å—à–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è –¥–µ–Ω–µ–∂–Ω—ã—Ö —Ä–∞—Å—á—ë—Ç–æ–≤
getcontext().prec = 28

# ===== –ù–ê–°–¢–†–û–ô–ö–ò =====
PAIR = "BTCUSDT"                      # Bybit USDT-–ø–µ—Ä–ø (linear)
LEVERAGE = Decimal("3")               # –ø–ª–µ—á–æ x3
TRADE_AMOUNT = Decimal("200")         # —Ç–≤–æ—è –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–∞—Ä–∂–∞, USDT
TAKER_FEE = Decimal("0.001")          # 0.1% –∑–∞ —Å—Ç–æ—Ä–æ–Ω—É (–≤—Ö–æ–¥ –∏ –≤—ã—Ö–æ–¥ = 2 * 0.1%)
TARGET_NET_PROFIT = Decimal("0.01")   # —á–∏—Å—Ç—ã–º–∏ +$0.01
POLL_PRICE_SEC = Decimal("0.2")       # —á–∞—Å—Ç–æ—Ç–∞ –æ–ø—Ä–æ—Å–∞ —Ü–µ–Ω—ã, –∫–æ–≥–¥–∞ –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞
MAX_OPEN_PER_SEC = Decimal("1")       # –Ω–µ —á–∞—â–µ 1 –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ —Å–µ–∫—É–Ω–¥—É

# ===== –°–û–°–¢–û–Ø–ù–ò–ï =====
in_position = False
last_open_ts = Decimal("0")
entry_price: Decimal | None = None
entry_time: datetime | None = None
required_exit_price: Decimal | None = None

# ===== –£–¢–ò–õ–ò–¢–´ =====
def get_current_price() -> Decimal | None:
    """–†–µ–∞–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞ Bybit v5 –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤ (linear)."""
    try:
        r = requests.get(
            "https://api.bybit.com/v5/market/tickers",
            params={"category": "linear", "symbol": PAIR},
            timeout=2
        )
        j = r.json()
        return Decimal(j["result"]["list"][0]["lastPrice"])
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ü–µ–Ω—ã: {e}")
        return None

def notional() -> Decimal:
    """–ù–æ—Ç–∏—Ü–∏–æ–Ω–∞–ª –ø–æ–∑–∏—Ü–∏–∏ (USDT)."""
    return TRADE_AMOUNT * LEVERAGE

def qty(entry_p: Decimal) -> Decimal:
    """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ (BTC) = notional / entry_price."""
    return notional() / entry_p

def gross_pnl(entry_p: Decimal, exit_p: Decimal) -> Decimal:
    """Gross PnL = (exit - entry) * qty."""
    return (exit_p - entry_p) * qty(entry_p)

def total_fees() -> Decimal:
    """–°—É–º–º–∞—Ä–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏ –∑–∞ –≤—Ö–æ–¥+–≤—ã—Ö–æ–¥ –∫–∞–∫ taker: notional * (fee_in + fee_out)."""
    return notional() * TAKER_FEE * 2

def net_pnl(entry_p: Decimal, exit_p: Decimal) -> Decimal:
    """Net PnL = Gross - Fees."""
    return gross_pnl(entry_p, exit_p) - total_fees()

def solve_required_exit_price(entry_p: Decimal) -> Decimal:
    """
    –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –≤—ã—Ö–æ–¥–∞, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–π
    NET >= TARGET_NET_PROFIT (—É—á—Ç–µ–Ω—ã –¥–≤–µ –∫–æ–º–∏—Å—Å–∏–∏).
    NET = (p_exit - p_entry) * (notional / p_entry) - (notional * 2 * fee)
    => p_exit >= p_entry + (TARGET + notional*2*fee) * (p_entry / notional)
    """
    need_gross = TARGET_NET_PROFIT + total_fees()
    delta_price = need_gross / qty(entry_p)          # = need_gross * (entry_p / notional)
    return entry_p + delta_price

def is_margin_call(current_p: Decimal) -> bool:
    """
    –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –º–æ–¥–µ–ª—å –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ (–∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–∞—Ä–∂–∞):
    –µ—Å–ª–∏ –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —É–±—ã—Ç–æ–∫ –ø–æ –ø–æ–∑–∏—Ü–∏–∏ <= -TRADE_AMOUNT, —Å—á–∏—Ç–∞–µ–º margin call.
    (–ü—Ä–æ—Ü–µ–Ω—Ç –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç maintenance margin, –Ω–æ
     –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ.)
    """
    unrealized = gross_pnl(entry_price, current_p)
    return unrealized <= -TRADE_AMOUNT

def fmt(x: Decimal, n=2) -> str:
    return f"{x:.{n}f}"

def distance_to_target(cur: Decimal, target: Decimal) -> Decimal:
    return (target - cur) if target is not None else Decimal("0")

# ===== –¢–û–†–ì–û–í–ê–Ø –õ–û–ì–ò–ö–ê =====
def open_trade_if_possible(now_ts: Decimal):
    global in_position, last_open_ts, entry_price, entry_time, required_exit_price
    if in_position:
        return
    if now_ts - last_open_ts < (Decimal("1") / MAX_OPEN_PER_SEC):
        return

    price = get_current_price()
    if price is None:
        return

    in_position = True
    last_open_ts = now_ts
    entry_price = price
    entry_time = datetime.now()
    required_exit_price = solve_required_exit_price(entry_price)

    # –û—Ç—á—ë—Ç –ø–æ –≤—Ö–æ–¥—É
    print(
        f"üì• –í–•–û–î | {PAIR} | —Ü–µ–Ω–∞ {fmt(entry_price)} | –ø–ª–µ—á–æ x{LEVERAGE} | "
        f"—Ü–µ–ª—å (net +{TARGET_NET_PROFIT}): {fmt(required_exit_price)} | "
        f"–≤—Ä–µ–º—è {entry_time.strftime('%H:%M:%S')}"
    )

def manage_open_trade():
    global in_position, entry_price, entry_time, required_exit_price
    if not in_position:
        return

    price = get_current_price()
    if price is None:
        return

    # –•–∞—Ä—Ç–±–∏—Ç: —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ —Ü–µ–ª–∏
    need = distance_to_target(price, required_exit_price)
    print(f"‚è≥ –¶–µ–Ω–∞ {fmt(price)} | —Ü–µ–ª—å {fmt(required_exit_price)} | –æ—Å—Ç–∞–ª–æ—Å—å {fmt(need)}")

    # TAKE PROFIT: —Å—Ç—Ä–æ–≥–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ net >= +0.01
    if price >= required_exit_price:
        exit_price = price
        exit_time = datetime.now()
        g = gross_pnl(entry_price, exit_price)
        fees = total_fees()
        net = g - fees

        print(
            "‚úÖ –í–´–•–û–î (TAKE PROFIT)\n"
            f"–ü–∞—Ä–∞: {PAIR}\n"
            f"–í—Ö–æ–¥:  {fmt(entry_price)}  ({entry_time.strftime('%H:%M:%S')})\n"
            f"–í—ã—Ö–æ–¥: {fmt(exit_price)}  ({exit_time.strftime('%H:%M:%S')})\n"
            f"Gross: {fmt(g, 5)} USDT | –ö–æ–º–∏—Å—Å–∏–∏: {fmt(fees, 5)} USDT | Net: {fmt(net, 5)} USDT"
        )

        # —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        in_position = False
        entry_price = None
        entry_time = None
        required_exit_price = None
        return

    # MARGIN CALL (—Å–∏–º—É–ª–∏—Ä—É–µ–º –ª–∏–∫–≤–∏–¥–∞—Ü–∏—é –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ –≤—Å–µ–π –º–∞—Ä–∂–∏)
    if is_margin_call(price):
        exit_price = price
        exit_time = datetime.now()
        g = gross_pnl(entry_price, exit_price)
        fees = total_fees()
        net = g - fees

        print(
            "‚ö†Ô∏è MARGIN CALL (—Å–∏–º—É–ª—è—Ü–∏—è –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏)\n"
            f"–ü–∞—Ä–∞: {PAIR}\n"
            f"–í—Ö–æ–¥:  {fmt(entry_price)}  ({entry_time.strftime('%H:%M:%S')})\n"
            f"–í—ã—Ö–æ–¥: {fmt(exit_price)}  ({exit_time.strftime('%H:%M:%S')})\n"
            f"Gross: {fmt(g, 5)} USDT | –ö–æ–º–∏—Å—Å–∏–∏: {fmt(fees, 5)} USDT | Net: {fmt(net, 5)} USDT"
        )

        # —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        in_position = False
        entry_price = None
        entry_time = None
        required_exit_price = None
        return

# ===== MAIN =====
if __name__ == "__main__":
    print("üìà BTCUSDT Futures –º–∏–∫—Ä–æ—Å–∫–∞–ª—å–ø–µ—Ä –∑–∞–ø—É—â–µ–Ω (—Ä–µ–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã, REST v5).")
    while True:
        now = Decimal(str(time.time()))
        open_trade_if_possible(now)   # –≤—Ö–æ–¥ –Ω–µ —á–∞—â–µ 1/—Å–µ–∫ –∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–∏
        manage_open_trade()           # —É–¥–µ—Ä–∂–∏–≤–∞–µ–º –¥–æ TP (net>=+0.01) –∏–ª–∏ margin call
        time.sleep(float(POLL_PRICE_SEC if in_position else Decimal("1.0")))
