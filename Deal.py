import asyncio
import aiohttp
from datetime import datetime
import pytz
from Telegram import send_telegram_message

# –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å –∑–∞ —á–∞—Å
total_pnl = 0

# –†–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏ –≤ USDT
deal_size = 200

# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É BTC
async def get_current_price():
    url = "https://api.bybit.com/v5/market/tickers?category=linear&symbol=BTCUSDT"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            data = await resp.json()
            return float(data["result"]["list"][0]["lastPrice"])

# –°–∏–º—É–ª—è—Ü–∏—è —Å–¥–µ–ª–∫–∏
async def simulate_trade(direction, entry_price, atr):
    global total_pnl

    tp_distance = 0.5 * atr
    sl_distance = 0.25 * atr

    if direction == "up":
        take_profit = entry_price + tp_distance
        stop_loss = entry_price - sl_distance
        side = "BUY"
    else:
        take_profit = entry_price - tp_distance
        stop_loss = entry_price + sl_distance
        side = "SELL"

    tz = pytz.timezone("Europe/Amsterdam")
    open_time = datetime.now(tz).strftime("%H:%M:%S")

    max_duration = 270  # 4.5 –º–∏–Ω—É—Ç—ã
    elapsed = 0

    while elapsed < max_duration:
        current_price = await get_current_price()

        if direction == "up":
            if current_price >= take_profit:
                exit_price = take_profit
                pnl = (exit_price - entry_price) * (deal_size / entry_price)
                total_pnl += pnl
                break
            elif current_price <= stop_loss:
                exit_price = stop_loss
                pnl = (exit_price - entry_price) * (deal_size / entry_price)
                total_pnl += pnl
                break
        else:
            if current_price <= take_profit:
                exit_price = take_profit
                pnl = (entry_price - exit_price) * (deal_size / entry_price)
                total_pnl += pnl
                break
            elif current_price >= stop_loss:
                exit_price = stop_loss
                pnl = (entry_price - exit_price) * (deal_size / entry_price)
                total_pnl += pnl
                break

        await asyncio.sleep(5)
        elapsed += 5

    else:
        # –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ ‚Äî –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ
        exit_price = await get_current_price()
        if direction == "up":
            pnl = (exit_price - entry_price) * (deal_size / entry_price)
        else:
            pnl = (entry_price - exit_price) * (deal_size / entry_price)
        total_pnl += pnl

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–¥–∏–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ
    result_text = "–ü–†–ò–ë–´–õ–¨" if pnl > 0 else "–£–ë–´–¢–û–ö"
    send_telegram_message(
        f"üíº {side} | {open_time}\n"
        f"‚ñ∂Ô∏è Entry: {entry_price:.2f}\n"
        f"‚èπ Exit: {exit_price:.2f}\n"
        f"üí∞ {result_text}: {pnl:.2f} USDT"
    )

# –û—Ç—á—ë—Ç –∫–∞–∂–¥—ã–π —á–∞—Å
async def report_hourly_pnl():
    global total_pnl
    while True:
        await asyncio.sleep(3600)
        send_telegram_message(f"üìä –ò—Ç–æ–≥ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å: {total_pnl:.2f} USDT")
        total_pnl = 0
