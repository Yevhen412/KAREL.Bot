import asyncio
import websockets
import json
import time
from datetime import datetime
from config import (
    SYMBOL,
    IMPULSE_THRESHOLD_PERCENT,
    IMPULSE_WINDOW_SECONDS,
    ALIVE_NOTIFICATION_INTERVAL_MINUTES,
)
from telegram_notifier import send_message

# –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ alive-—Å–æ–æ–±—â–µ–Ω–∏—è
price_history = []
last_alive_time = 0

async def handle_socket():
    global last_alive_time
    url = "wss://stream.bybit.com/v5/public/spot"

    await send_message("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç –∏–º–ø—É–ª—å—Å...")

    async with websockets.connect(url) as ws:
        await ws.send(json.dumps({
            "op": "subscribe",
            "args": [f"publicTrade.{SYMBOL}"]
        }))
        await send_message(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ WebSocket –ø–æ {SYMBOL}")

        while True:
            try:
                message = await asyncio.wait_for(ws.recv(), timeout=30)
                data = json.loads(message)

                if "data" in data:
                    for trade in data["data"]:
                        price = float(trade["p"])
                        timestamp = time.time()
                        price_history.append((timestamp, price))

                        # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏
                        price_history[:] = [
                            (t, p) for t, p in price_history
                            if timestamp - t <= IMPULSE_WINDOW_SECONDS
                        ]

                        prices = [p for _, p in price_history]
                        if prices:
                            min_price = min(prices)
                            max_price = max(prices)
                            change_percent = (max_price - min_price) / min_price * 100

                            if change_percent >= IMPULSE_THRESHOLD_PERCENT:
                                direction = "–≤–≤–µ—Ä—Ö" if prices[-1] > prices[0] else "–≤–Ω–∏–∑"
                                await send_message(f"üöÄ –ò–º–ø—É–ª—å—Å {direction}! –¶–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –Ω–∞ {change_percent:.2f}% –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {IMPULSE_WINDOW_SECONDS} —Å–µ–∫.")

                # Alive-—Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑ –≤ N –º–∏–Ω—É—Ç
                now = time.time()
                if now - last_alive_time > ALIVE_NOTIFICATION_INTERVAL_MINUTES * 60:
                    await send_message(f"‚è≥ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω. –ñ–¥—ë–º –∏–º–ø—É–ª—å—Å –ø–æ {SYMBOL}...")
                    last_alive_time = now

            except asyncio.TimeoutError:
                await send_message("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç WebSocket. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
                break  # –≤—ã–π–¥–µ–º –∏–∑ —Ü–∏–∫–ª–∞, –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Å—Ç—Å—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ

async def main():
    while True:
        try:
            await handle_socket()
        except Exception as e:
            await send_message(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {e}")
            await asyncio.sleep(5)

if __name__ == "__main__":
    asyncio.run(main())
