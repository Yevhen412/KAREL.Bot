import asyncio
import websockets
import json
import time
from datetime import datetime
from config import (
    SYMBOL,
    IMPULSE_THRESHOLD_PERCENT,
    IMPULSE_WINDOW_SECONDS,
    ALIVE_NOTIFICATION_INTERVAL_MINUTES
)
from telegram_notifier import send_message
send_message("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç –∏–º–ø—É–ª—å—Å")

# –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ alive-—Å–æ–æ–±—â–µ–Ω–∏—è
price_history = []
last_alive_time = 0

async def handle_socket():
    global last_alive_time
    url = "wss://stream.bybit.com/v5/public/spot"

    async with websockets.connect(url, ping_interval=20, ping_timeout=20) as ws:
        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫–∏ –ø–æ BTC
        payload = {
            "op": "subscribe",
            "args": [f"publicTrade.{SYMBOL}"]
        }
        await ws.send(json.dumps(payload))
        print("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω, –æ–∂–∏–¥–∞–Ω–∏–µ –∏–º–ø—É–ª—å—Å–∞...")

        while True:
            try:
                message = await ws.recv()
                data = json.loads(message)

                if "data" not in data:
                    continue

                trades = data["data"]
                for trade in trades:
                    price = float(trade["p"])
                    timestamp = int(trade["T"]) / 1000  # ms to s

                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                    price_history.append((timestamp, price))

                    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
                    cutoff = timestamp - IMPULSE_WINDOW_SECONDS
                    price_history[:] = [(t, p) for t, p in price_history if t >= cutoff]

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–º–ø—É–ª—å—Å
                    if price_history:
                        start_price = price_history[0][1]
                        percent_change = (price - start_price) / start_price * 100

                        if abs(percent_change) >= IMPULSE_THRESHOLD_PERCENT:
                            direction = "üîº –≤–≤–µ—Ä—Ö" if percent_change > 0 else "üîΩ –≤–Ω–∏–∑"
                            message = (
                                f"üö® BTC –∏–º–ø—É–ª—å—Å {direction} –Ω–∞ {percent_change:.2f}% "
                                f"–∑–∞ {IMPULSE_WINDOW_SECONDS} —Å–µ–∫. (—Ü–µ–Ω–∞: {price:.2f})"
                            )
                            print(message)
                            send_telegram_message(message)

                            # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
                            price_history.clear()

                    # –†–∞–∑ –≤ N –º–∏–Ω—É—Ç ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –±–æ—Ç –∂–∏–≤
                    now = time.time()
                    if now - last_alive_time > ALIVE_NOTIFICATION_INTERVAL_MINUTES * 60:
                        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                        send_telegram_message(f"ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω. {timestamp}")
                        last_alive_time = now

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ WebSocket: {e}")
                await asyncio.sleep(5)  # –ü–æ–¥–æ–∂–¥–∞—Ç—å –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º

if __name__ == "__main__":
    asyncio.run(handle_socket())
