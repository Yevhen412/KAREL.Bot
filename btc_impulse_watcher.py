import os
import asyncio
import pandas as pd
import datetime
from bybit_api import fetch_ohlcv
from correlation import compute_correlation
from notifier import send_message

PAIRS = ["BTCUSDT", "ETHUSDT", "SOLUSDT", "AVAXUSDT", "XRPUSDT", "ADAUSDT"]
TIMEFRAME = "5"
DAYS = 1
CORR_THRESHOLD = 0.85
CHECK_INTERVAL = 60  # —Å–µ–∫ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)
ALERT_INTERVAL = 600  # –µ—Å–ª–∏ –Ω–µ—Ç –∏–º–ø—É–ª—å—Å–∞, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ "–±–æ—Ç –∂–∏–≤" –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç

async def main_loop():
    last_alert_time = datetime.datetime.utcnow() - datetime.timedelta(seconds=ALERT_INTERVAL)

    while True:
        now_nl = datetime.datetime.utcnow() + datetime.timedelta(hours=1)
        if now_nl.hour >= 0 and now_nl.hour < 7:
            await send_message("‚è∏ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –Ω–æ—á—å (00:00‚Äì07:00 NL –≤—Ä–µ–º–µ–Ω–∏).")
            while True:
                await asyncio.sleep(60)
                now_nl = datetime.datetime.utcnow() + datetime.timedelta(hours=1)
                if now_nl.hour == 7 and now_nl.minute == 0:
                    await send_message("‚ñ∂Ô∏è –ë–æ—Ç –≤–æ–∑–æ–±–Ω–æ–≤–ª—ë–Ω –≤ 07:00 (NL –≤—Ä–µ–º—è).")
                    break

        try:
            dfs = {}
            for pair in PAIRS:
                df = await fetch_ohlcv(pair, TIMEFRAME, DAYS)
                dfs[pair] = df

            btc_df = dfs["BTCUSDT"]
            btc_range = btc_df["high"].iloc[-1] - btc_df["low"].iloc[-1]
            atr = btc_df["high"].sub(btc_df["low"]).rolling(window=14).mean().iloc[-1]

            if btc_range >= 0.5 * atr:
                report = f"‚ö°Ô∏è BTC –¥–≤–∏–∂–µ–Ω–∏–µ: {btc_range:.2f} (ATR: {atr:.2f})\n"
                for pair, df in dfs.items():
                    if pair == "BTCUSDT":
                        continue
                    corr = compute_correlation(btc_df, df)
                    if corr >= CORR_THRESHOLD:
                        delta = df["high"].iloc[-1] - df["low"].iloc[-1]
                        pct = 100 * delta / df["low"].iloc[-1]
                        report += f"üîó {pair}: –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è {corr:.2f}, Œî {pct:.2f}%\n"
                await send_message(report)
                last_alert_time = datetime.datetime.utcnow()

            # –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, —á—Ç–æ –±–æ—Ç –∂–∏–≤ (–µ—Å–ª–∏ –Ω–µ—Ç –∏–º–ø—É–ª—å—Å–∞)
            if (datetime.datetime.utcnow() - last_alert_time).total_seconds() >= ALERT_INTERVAL:
                await send_message("ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω, –∏–º–ø—É–ª—å—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
                last_alert_time = datetime.datetime.utcnow()

        except Exception as e:
            await send_message(f"‚ùóÔ∏è –û—à–∏–±–∫–∞: {e}")

        await asyncio.sleep(CHECK_INTERVAL)


if __name__ == "__main__":
    asyncio.run(main_loop())
